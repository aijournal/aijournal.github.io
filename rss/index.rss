<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>AI Journal</title><description>AI Journal</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>AI Journal</title><link>http://localhost:2368/</link></image><generator>Ghost 2.0</generator><lastBuildDate>Tue, 28 Aug 2018 17:20:35 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Comprehensive Guide to Generative Adversarial Networks and Wasserstein GANs</title><description>&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/0-hLc7dg5PV6wsQR8S.jpg" class="kg-image"&gt;&lt;figcaption&gt;Progressive Growing of GANs&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;&lt;p&gt;The  year 2017 was a period of scientific breakthroughs in deep learning,  with the publication of numerous research papers. Every year seems like a  big leap toward artificial general intelligence, or AGI.&lt;/p&gt;&lt;p&gt;One exciting development involves generative modelling and the use of &lt;a href="https://arxiv.org/abs/1701.07875" rel="nofollow noopener"&gt;Wasserstein GANs&lt;/a&gt; (Generative&lt;/p&gt;</description><link>http://localhost:2368/comprehensive-guide-to-generative-adversarial-networks-and-wasserstein-gans/</link><guid isPermaLink="false">5b857abde55008133b75b99f</guid><dc:creator>AI Journal</dc:creator><pubDate>Tue, 28 Aug 2018 16:46:22 GMT</pubDate><content:encoded>&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/0-hLc7dg5PV6wsQR8S.jpg" class="kg-image"&gt;&lt;figcaption&gt;Progressive Growing of GANs&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;&lt;p&gt;The  year 2017 was a period of scientific breakthroughs in deep learning,  with the publication of numerous research papers. Every year seems like a  big leap toward artificial general intelligence, or AGI.&lt;/p&gt;&lt;p&gt;One exciting development involves generative modelling and the use of &lt;a href="https://arxiv.org/abs/1701.07875" rel="nofollow noopener"&gt;Wasserstein GANs&lt;/a&gt; (Generative Adversarial Networks). An influential paper on the topic  has completely changed the approach to generative modelling, moving  beyond the time when Ian Goodfellow published the original &lt;a href="https://arxiv.org/pdf/1701.07875.pdf" rel="nofollow noopener"&gt;GAN paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Why Wasserstein GANs are such a big deal:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;With  Wasserstein GAN, you can train the discriminator to convergence. If  true, it would totally remove the need to balance generator updates with  discriminator updates, as earlier the updates of generator and  discriminator were happening with no correlation to each other.&lt;/li&gt;&lt;li&gt;The initial paper (Soumith et al.) proposed a new GAN training algorithm that works well on the commonly used GAN datasets.&lt;/li&gt;&lt;li&gt;Usually  theory justified papers don’t provide good empirical results, but the  training algorithm mentioned in the paper is backed up by theory and it  explains why WGANs work so much better.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;&lt;p&gt;This  paper differs from earlier work: the training algorithm is backed up by  theory, and few examples exist where theory-justified papers gave good  empirical results. The big thing about WGANs is that developers can  train their discriminator to convergence, which was not possible  earlier. Doing this eliminates the need to balance generator updates  with discriminator updates.&lt;/p&gt;&lt;figure class="kg-embed-card"&gt;&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/M17D2j0QjoQ?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;h3 id="what-is-earth-mover-s-distance"&gt;What is Earth Mover’s Distance?&lt;/h3&gt;&lt;p&gt;When  dealing with discrete probability distributions, the Wasserstein  Distance is also known as Earth mover’s distance (EMD). Imagining  different heaps of earth in varying quantities, EMD would be the minimal  total amount of work it takes to transform one heap into another. Here,  work is defined as the product of the amount of earth being moved and  the distance it covers. Two discrete probability distributions are  usually defined as Pr and P(theta).&lt;/p&gt;&lt;p&gt;Pr comes from unknown distribution, and the goal is to learn P(theta) that approximates Pr.&lt;/p&gt;&lt;p&gt;Calculation of EMD is an optimization process with infinite solution approaches; the challenge is to find the optimal one.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/1-vl1T2Bo4o1XDGPiIJwwvLw.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;One  approach would be to directly learn probability density function  P(theta). This would mean that P(theta) is some differentiable function  that can be optimized by maximum likelihood estimation. To do that,  minimize the KL (Kullback–Leibler) divergence KL(Pr||(P(theta)) and add a  random noise to P(theta) when training the model for maximum likelihood  estimation. This ensures that distribution is defined elsewhere;  otherwise, if a single point lies outside P(theta), the KL divergence  can explode.&lt;/p&gt;&lt;p&gt;Adversarial  training makes it hard to see whether models are training. It has been  shown that GANs are related to actor-critic methods in reinforcement  learning. &lt;a href="https://arxiv.org/abs/1610.01945" rel="nofollow noopener"&gt;Learn More&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="kullback-leibler-and-jensen-shannon-divergence"&gt;Kullback–Leibler and Jensen–Shannon Divergence&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;KL  (Kullback–Leibler) divergence measures how one probability distribution  P diverges from a second expected probability distribution Q.&lt;/li&gt;&lt;/ol&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/0-E4vCQjDlHlsgL62l.png" class="kg-image"&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;We  drop −H(p) going from (18) − (19) because it is a constant. We can see  if we minimize the LHS (Left-hand side), we are maximizing the  expectation of log q(x) over the distribution &lt;em&gt;p&lt;/em&gt;. Therefore, minimizing the LHS is maximizing the RHS, which is maximizing the log-likelihood of the data.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;DKL achieves the minimum zero when p(x) == q(x) everywhere.&lt;/p&gt;&lt;p&gt;It  is noticeable from the formula that KL divergence is asymmetric. In  cases where P(x) is close to zero, but Q(x) is significantly non-zero,  the q’s effect is disregarded. It could cause buggy results when the  intention was just to measure the similarity between two equally  important distributions.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Jensen–Shannon  Divergence is another measure of similarity between two probability  distributions. JS (Jensen–Shannon) divergence is symmetric and  relatively smoother and is bounded by [0,1].&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Given  two Gaussian distributions, P with mean=0 and std=1 and Q with mean=1  and std=1. The average of two distributions is labelled as m=(p+q)/2. KL  divergence DKL is asymmetric but JS divergence DJS is symmetric.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/1-vAZaTAKwx01fOeDU5C74tA.png" class="kg-image"&gt;&lt;/figure&gt;&lt;h3 id="generative-adversarial-network-gan-"&gt;Generative Adversarial Network (GAN)&lt;/h3&gt;&lt;p&gt;GAN consists of two models:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A  discriminator D estimates the probability of a given sample coming from  the real dataset. It works as a critic and is optimized to tell the  fake samples from the real ones.&lt;/li&gt;&lt;li&gt;A  generator G outputs synthetic samples given a noise variable input z (z  brings in potential output diversity). It is trained to capture the  real data distribution so that its generative samples can be as real as  possible, or in other words, it can trick the discriminator to offer a  high probability.&lt;/li&gt;&lt;/ul&gt;&lt;figure class="kg-embed-card"&gt;&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/1gXs2S4GnqY?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/0-ofySdjANDG-Ffdr8.png" class="kg-image"&gt;&lt;/figure&gt;&lt;h3 id="use-wasserstein-distance-as-gan-loss-function"&gt;Use Wasserstein Distance as GAN Loss Function&lt;/h3&gt;&lt;p&gt;It  is almost impossible to exhaust all the joint distributions in Π(pr,pg)  to compute infγ∼Π(pr,pg). Instead, the authors proposed a smart  transformation of the formula based on the Kantorovich-Rubinstein  duality:&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/aqw.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;One big problem involves maintaining the K-Lipschitz continuity of fw  during the training to make everything work out. The paper presented a  simple but very practical noteworthy trick: after the gradient gets  updated, clamping the weights w to a small window is required, such as  [−0.01,0.01], resulting in a compact parameter space W; and thus, fw  obtains it’s lower and upper bounds in order to preserve the Lipschitz  continuity.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/sde.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;Compared to the original GAN algorithm, the WGAN undertakes the following changes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;After  every gradient update on the critic function, we are required to clamp  the weights to a small fixed range is required, usually [−c,c].&lt;/li&gt;&lt;li&gt;Use  a new loss function derived from the Wasserstein distance. The  discriminator model does not play as a direct critic but rather a helper  for estimating the Wasserstein metric between real and generated data  distributions.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Empirically  the authors recommended usage of RMSProp optimizer on the critic,  rather than a momentum-based optimizer such as Adam which could cause  instability in the model training.&lt;/p&gt;&lt;h3 id="improved-gan-training"&gt;Improved GAN Training&lt;/h3&gt;&lt;p&gt;The following suggestions are proposed to help stabilize and improve the training of GANs.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Adding noises — &lt;/strong&gt;Based  on the discussion in the previous section, it is now known that Pr and  Pg are disjointed in a high dimensional space and they may become the  reason for the problem of vanishing gradient.To synthetically “spread  out” the distribution and to create higher chances for two probability  distributions to have overlaps, one solution is to add continuous noises  onto the inputs of the discriminator D.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;One-sided label smoothing — &lt;/strong&gt;When  we are feeding the discriminator, instead of providing the labels as 1  and 0, this paper proposed using values such as 0.9 and 0.1. This will  help in reduce the vulnerabilities in Network.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Wasserstein metric is proposed to replace JS divergence because it has a much smoother value space.&lt;/p&gt;&lt;h3 id="overview-of-dcgan"&gt;Overview of DCGAN&lt;/h3&gt;&lt;p&gt;In  recent years, supervised learning with convolutional networks (CNNs)  has seen huge adoption in computer vision applications. As compared to  supervised learning, ConvNets have received little attention. Deep  convolutional generative adversarial networks (DCGANs) have certain  architectural constraints and demonstrate a strong potential for  unsupervised learning. Training on various image datasets show  convincing evidence that a deep convolutional adversarial pair learns a  hierarchy of representations from object parts to scenes in both the  generator and discriminator. Additionally, the learned features were  used for novel tasks — demonstrating their applicability as general  image representations.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/aqe3.png" class="kg-image"&gt;&lt;/figure&gt;&lt;h3 id="problem-with-gans"&gt;Problem with GANs&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;It’s harder to achieve Nash Equilibrium &lt;/strong&gt;— Since  there are two neural networks (generator and discriminator), they are  being trained simultaneously to find a Nash Equilibrium. In the whole  process each player updates the cost function independently without  considering the updates of cost function by another network. This method  cannot assure a convergence, which is the stated objective.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vanishing gradient &lt;/strong&gt;— When  the discriminator works as required, the distribution D(x) equals 1  when x belongs to Pr and vice versa. In this process, loss function L  fails to zero and results in no gradients to update the loss during the  training process. This figure shows that as the discriminator gets  increasingly better, the gradient vanishes fast, tending to 0.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Use better metric of distribution similarity &lt;/strong&gt;— The  loss function as proposed in the vanilla GAN (by Goodfellow et al.)  measures the JS divergence between the distributions of Pr and P(theta).  This metric fails to provide a meaningful value when two distributions  are disjointed.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Replacing JS divergence with the Wasserstein metric gives a much smoother value space.&lt;/p&gt;&lt;p&gt;Training a Generative Adversarial Network faces a major problem:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If  the discriminator works as required, the gradient of the loss function  starts tending to zero. As a process loss cannot be updated, training  becomes very slow or the model gets stuck.&lt;/li&gt;&lt;li&gt;If  the discriminator behaves badly, the generator does not have accurate  feedback and the loss function cannot represent the reality.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="evaluation-metric"&gt;Evaluation Metric&lt;/h3&gt;&lt;p&gt;GANs  faced the problem of good objective function that can give better  insight of the whole training process. A good evaluation metric was  needed. Wasserstein Distance sought to address this problem.&lt;/p&gt;&lt;h3 id="few-gans-applications"&gt;Few GANs Applications&lt;/h3&gt;&lt;p&gt;These  are some very few applications of GANs (just to provide some ideas) but  they can be extended to do so much than what we can possibly think of.  There are many papers which have made use of different architectures of  GANs, some are listed below:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Font generation with conditional GANs&lt;/li&gt;&lt;li&gt;Interactive image generation&lt;/li&gt;&lt;li&gt;Image editing&lt;/li&gt;&lt;li&gt;Human pose estimation&lt;/li&gt;&lt;li&gt;Synthetic data generation&lt;/li&gt;&lt;li&gt;Visual saliency prediction&lt;/li&gt;&lt;li&gt;Adversarial examples (defense vs attack)&lt;/li&gt;&lt;li&gt;Image blending&lt;/li&gt;&lt;li&gt;Super resolution&lt;/li&gt;&lt;li&gt;Image inpainting&lt;/li&gt;&lt;li&gt;Face aging&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="code"&gt;Code&lt;/h3&gt;&lt;p&gt;The code can be found in this &lt;a href="https://github.com/prajjwal1/gans" rel="nofollow noopener"&gt;Github* repository&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="empirical-results"&gt;Empirical Results&lt;/h3&gt;&lt;p&gt;Initially  the paper (Soumith at al.) demonstrated the real difference between GAN  and WGAN. A GAN Discriminator and Wasserstein GAN critic are trained  optimality. In the following graph blue depicts real Gaussian  distribution and green depicts fake ones then the values are plotted.  The red curve depicts the GAN discriminator output.&lt;/p&gt;&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/08/aqer.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;Both  GAN and WGAN will identify which distribution is fake and which ones are  real, but GAN Discriminator does this in such a way that gradients  vanish over this high dimensional space. WGANs make use of weight  clamping which gives them an edge and it which is able to give gradients  in almost every point in space. Wasserstein loss seems to correlate  well with image quality also.&lt;/p&gt;&lt;p&gt;This post was originally written for Intel AI Academy titled as &lt;a href="https://software.intel.com/en-us/articles/better-generative-modelling-through-wasserstein-gans" rel="nofollow noopener"&gt;Better Generative modelling through Wasserstein GANs&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Visit &lt;/em&gt;&lt;a href="https://www.youtube.com/c/aijournal" rel="noopener nofollow nofollow noopener"&gt;&lt;em&gt;AI Journal&lt;/em&gt;&lt;/a&gt;&lt;em&gt; for more videos. Don’t forget to&lt;/em&gt;&lt;a href="https://www.youtube.com/c/aijournal?sub_confirmation=1" rel="noopener nofollow nofollow noopener"&gt;&lt;em&gt; subscribe&lt;/em&gt;&lt;/a&gt;&lt;em&gt; . Stay connected with us on &lt;/em&gt;&lt;a href="https://twitter.com/aijournalyt" rel="noopener nofollow nofollow noopener"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;&lt;em&gt; to stay updated in AI Research. Please support me on &lt;/em&gt;&lt;a href="https://www.patreon.com/aijournal" rel="nofollow noopener nofollow noopener"&gt;&lt;em&gt;Patreon&lt;/em&gt;&lt;/a&gt;&lt;/blockquote&gt;</content:encoded></item></channel></rss>